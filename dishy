#!/usr/bin/env bash

api_key=${DISHY_GIPHY_API_KEY:-dc6zaTOxFJmzC}
rating=${DISHY_RATING:-pg}

# tmux requires unrecognized OSC sequences to be wrapped with DCS tmux;
# <sequence> ST, and for all ESCs in <sequence> to be replaced with ESC ESC. It
# only accepts ESC backslash for ST.
function print_osc() {
  if [[ $TERM == screen* ]] ; then
    printf "\033Ptmux;\033\033]"
  else
    printf "\033]"
  fi
}

# More of the tmux workaround described above.
function print_st() {
  if [[ $TERM == screen* ]] ; then
    printf "\a\033\\"
  else
    printf "\a"
  fi
}

# print_image filename inline base64contents
#   filename: Filename to convey to client
#   inline: 0 or 1
#   base64contents: Base64-encoded contents
function print_image() {
  if [ "$watch_mode" == true ]; then
    clear
  fi
  print_osc
  printf '1337;File='
  if [[ -n "$1" ]]; then
    printf 'name='`echo -n "$1" | base64`";"
  fi
  if $(base64 --version 2>&1 | grep GNU > /dev/null)
  then
    BASE64ARG=-d
  else
    BASE64ARG=-D
  fi
  echo -n "$3" | base64 $BASE64ARG | wc -c | awk '{printf "size=%d",$1}'
  printf ";inline=$2"
  printf ":"
  echo -n "$3"
  print_st
  printf '\n'
}

print_image_url() {
  print_image $1 1 "$(base64 <(curl -s $(echo $1)))"
}

get_random_url () {
  raw_results=$(curl -s http://api.giphy.com/v1/gifs/random?api_key=$api_key\&rating=$rating)
  url=$(jq .data.image_original_url --raw-output <<< $raw_results)
}

get_url () {
  search_term=${1// /%20}
  raw_results=$(curl -s http://api.giphy.com/v1/gifs/translate?s=$search_term\&api_key=$api_key\&rating=$rating)
  if [ $(jq '.data | length' <<< $raw_results) != '0' ]; then
    url=$(jq .data.images.original.url --raw-output <<< $raw_results)
  else
    echo "Terrible search term!"
    get_random_url
  fi
}

dishy_watch() {
  watch_mode=true
  tput smcup
  if [ -t 0 ]; then stty -echo -icanon -icrnl time 0 min 0; fi

  clear

  keypress=''
  while [ "x$keypress" = "x" ]; do
    dish_up $*
    sleep 5
    keypress="`cat -v`"
  done

  if [ -t 0 ]; then stty sane; fi

  tput rmcup
}

dishy_help() {
  echo "Ways to be dishy:

  dishy
  dishy beans
  dishy beans --watch
  dishy beans --lots

WARNING: Dishy only works with iterm2-beta!
         \`brew install caskroom/versions/iterm2-beta\`

WARNING: DO NOT VISIT THIS WEBSITE:
         http://github.com/businesscritical/dishy/issues

WARNING: UNINSTALLATION OF DISHY MAY CAUSE SYSTEM INSTABILITY

"

  dish_up "thanks"
}

dishy_lots() {
  for i in {1..10}; do
    dish_up $*
    echo ""
  done
}

dish_up() {
  last_url=$url
  while [ "$last_url" == "$url" ]; do
    if [ $# -ne 0 ]; then
      get_url "$*"
    else
      get_random_url
    fi
  done

  print_image_url $url
}

last_arg=${@:$#}
all_but_last_arg=${@:1:$#-1}

if [ $last_arg ] && [ $last_arg == "--help" ]; then
  dishy_help
elif [ $last_arg ] && [ $last_arg == "--watch" ]; then
  dishy_watch $all_but_last_arg
elif [ $last_arg ] && [ $last_arg == "--lots" ]; then
  dishy_lots $all_but_last_arg
else
  dish_up $*
fi
